// Generated by CoffeeScript 1.12.4
var Animated, AnimatedMap, AnimatedStyle, AnimatedValue, AnimatedWithChildren, NativeAnimated, Type, assertType, isType, type;

assertType = require("assertType");

isType = require("isType");

Type = require("Type");

AnimatedWithChildren = require("./AnimatedWithChildren");

NativeAnimated = require("../NativeAnimated");

AnimatedStyle = require("./AnimatedStyle");

AnimatedValue = require("./AnimatedValue");

Animated = require("./Animated");

type = Type("AnimatedMap");

type.inherits(AnimatedWithChildren);

type.defineValues(function() {
  return {
    _values: {},
    _animatedValues: {},
    _updatedValues: {}
  };
});

type.definePrototype({
  __isAnimatedMap: true
});

type.defineMethods({
  attach: function(newValues) {
    this.__detachAnimatedValues(newValues);
    this.__attachNewValues(newValues);
    this.__isNative && this.__connectNativeValues();
  }
});

type.overrideMethods({
  __getValue: function() {
    return this.__getAllValues();
  },
  __getUpdatedValue: function() {
    var key, ref, value, values;
    values = {};
    ref = this._updatedValues;
    for (key in ref) {
      value = ref[key];
      values[key] = value.__getUpdatedValue();
    }
    this._updatedValues = {};
    return values;
  }
});

type.defineHooks({
  __didUpdateValue: function(key, value) {
    this._updatedValues[key] = value;
    this._didUpdate();
  },
  __getAllValues: function() {
    var animatedValue, key, ref, value, values;
    values = {};
    ref = this._values;
    for (key in ref) {
      value = ref[key];
      values[key] = (animatedValue = this._animatedValues[key]) ? animatedValue.__getValue() : value;
    }
    return values;
  },
  __getNonNativeValues: (function() {
    var isNative;
    isNative = function(animatedValue) {
      if (!animatedValue.__isNative) {
        return false;
      }
      if (!animatedValue.__isAnimatedMap) {
        return true;
      }
      return animatedValue.__isAnimatedTransform;
    };
    return function() {
      var animatedValue, key, ref, value, values;
      values = {};
      ref = this._values;
      for (key in ref) {
        value = ref[key];
        if (animatedValue = this._animatedValues[key]) {
          if (!isNative(animatedValue)) {
            values[key] = animatedValue.__getValue();
          }
        } else {
          values[key] = value;
        }
      }
      return values;
    };
  })(),
  __attachNewValues: function(newValues) {
    var key, value;
    assertType(newValues, Object);
    for (key in newValues) {
      value = newValues[key];
      this.__attachValue(value, key);
    }
  },
  __attachValue: function(value, key) {
    var map;
    if (value instanceof Animated) {
      this.__attachAnimatedValue(value, key);
      return;
    }
    if (isType(value, Object)) {
      map = this._animatedValues[key] || AnimatedMap({});
      map.attach(value);
      this.__attachAnimatedValue(map, key);
      return;
    }
    this._values[key] = value;
  },
  __attachAnimatedValue: function(animatedValue, key) {
    if (this._animatedValues[key]) {
      return;
    }
    this._values[key] = void 0;
    this._animatedValues[key] = animatedValue;
    animatedValue.__addChild(this, key);
  },
  __connectNativeValues: function() {
    var animatedValues, key, nativeTags, value;
    animatedValues = this._animatedValues;
    nativeTags = [];
    for (key in animatedValues) {
      value = animatedValues[key];
      if (!value.__isNative) {
        continue;
      }
      nativeTags.push(value.__getNativeTag());
    }
    if (nativeTags.length) {
      NativeAnimated.connectAnimatedNodes(nativeTags, this.__getNativeTag());
    }
  },
  __detachAllValues: function() {
    var animatedValue, key, ref;
    ref = this._animatedValues;
    for (key in ref) {
      animatedValue = ref[key];
      animatedValue.__removeChild(this);
    }
    this._values = {};
    this._animatedValues = {};
  },
  __detachAnimatedValue: function(animatedValue, newValue) {
    if (animatedValue.__isAnimatedMap) {
      if (newValue != null) {
        animatedValue.__detachAnimatedValues(newValue);
        return;
      }
      animatedValue.__detachAllValues();
    } else {
      if (animatedValue === newValue) {
        return;
      }
    }
    animatedValue.__removeChild(this);
    return delete this._animatedValues[key];
  },
  __detachAnimatedValues: function(newValues) {
    var animatedValues, key, value;
    assertType(newValues, Object);
    animatedValues = this._animatedValues;
    for (key in animatedValues) {
      value = animatedValues[key];
      this.__detachAnimatedValue(value, newValues[key]);
    }
  }
});

module.exports = AnimatedMap = type.build();
